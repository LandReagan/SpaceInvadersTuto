#ifndef EVENTENGINE_HPP_INCLUDED
#define EVENTENGINE_HPP_INCLUDED

#include "IEngine.hpp"
#include "EnumGameEvent.hpp"

#include <SFML/Window.hpp>

class AppWindow;

/**     \class EventEngine
 *      \brief Class designed for handling events and interfacing with API
 *
 */

class EventEngine : public IEngine
{
public:

    void stepForward(); /**< inherited from IEngine base class */

    void registerAppWindowPointer(AppWindow* pointer) {p_app_window = pointer;}

private:

    /** \brief Defines all game events.
     *  \enum of defined events in the game. Check related file for the list.
     */

    GAME_EVENTS game_event = UNKNOWN;

    AppWindow* p_app_window;

    /** \brief Used to get GAME_EVENTS from events generated by API
     * \return true if an new event was got
     * set Game event in enum GAME_EVENTS game_event
     */

    bool getNextGameEvent();

    /** \brief would process class member GAME_EVENTS
     */

    void sendGameEventToWorld();
};

#endif // EVENTENGINE_HPP_INCLUDED
